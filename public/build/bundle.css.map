{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { scaleSequential, scaleThreshold,scaleLinear, scaleBand, scaleTime } from 'd3-scale'\n  import { schemeOranges } from 'd3-scale-chromatic'\n  import { hexGrid } from './hex_grid.js'\n  import { \n    Graphic, \n    PolygonLayer, \n    createGeoScales ,\n    Section,\n    RectangleLayer,\n    Line,\n    XAxis,\n    YAxis \n    } from '@snlab/florence'\n  import DataContainer from '@snlab/florence-datacontainer'\n\n  // load data\n  const hex = new DataContainer(hexGrid)\n  const hexWithoutNull = hex.filter(row => row.mean_price !== null)\n  // set up scales\n\n  // 1. position\n  const myGeoScale = createGeoScales(hex.domain('$geometry'))\n\n  // 2. class breaks\n  const numClasses = 6\n  const classBins = hexWithoutNull\n    .bin({ groupBy: 'mean_price', method: 'EqualInterval', numClasses: numClasses })\n    .column('bins')\n  console.log(hexWithoutNull)\n  const classThresholds = binsToThreshold(classBins)\n\n  function binsToThreshold (bins) {\n    const thresholds = []\n    for (let index = 1; index < bins.length; index++) {\n      const bin = bins[index]\n      thresholds.push(bin[0])\n    }\n    return thresholds\n  }\n  console.log(classBins, classThresholds)\n  // 2. fill color\n  const myColorScale = scaleThreshold()\n    .domain(classThresholds)\n    .range(schemeOranges[numClasses])\n  console.log(myColorScale)\n  const padding = { left: 30, bottom: 30, top: 0, right: 10 };\n  const color = \"rgb(93, 134, 156)\";\n  const color1 = \"rgb(93, 250, 156)\";\n\n\n  // new data\n\n  let salesDistribution = hexWithoutNull\n    .bin({ groupBy: \"mean_floor_area\", method: \"EqualInterval\", numClasses: 500  })\n    .summarise({ mean_price: { mean_price: \"min\" } })\n  console.log(\"this is my aim\" , salesDistribution._data.$key);\n\n  let colors = [];\n  for(let p in salesDistribution.column('mean_price')) {\n    colors.push('rgb(93, 134, 156)');\n  }\n\n  salesDistribution.addColumn('color', colors);\n// change color\nlet showid;\nlet color_change = \"\";\nlet change_colors = [];\n  function ShowData(e){\n    \n    salesDistribution = hexWithoutNull\n    .bin({ groupBy: \"mean_floor_area\", method: \"EqualInterval\", numClasses: 500  })\n    .summarise({ mean_price: { mean_price: \"min\" } })\n\n    change_colors = [];\n    //console.log(hexWithoutNull._data.hex_id[e.key])\n    showid = e.key\n    console.log(\"show id is \" , showid)\n    for(let change in salesDistribution._data.$key) {\n      if(change == showid){\n        color_change = \"#ff0000\";\n      }\n      else{\n        color_change = \"rgb(93, 134, 156)\";\n      }\n      change_colors.push(color_change);\n    }\n    \n    salesDistribution.addColumn('color', change_colors);\n    console.log(salesDistribution.column('color'));\n  }\n\n  function MoveData(e){\n    salesDistribution = hexWithoutNull\n    .bin({ groupBy: \"mean_floor_area\", method: \"EqualInterval\", numClasses: 500  })\n    .summarise({ mean_price: { mean_price: \"min\" } })\n \n\n    let colors = [];\n    for(let p in salesDistribution.column('mean_price')) {\n      colors.push('rgb(93, 134, 156)');\n    }\n\n  salesDistribution.addColumn('color', colors);\n  }\n  \n</script>\n\n\n<style>\n  .hexgan-style{\n    text-align: center;\n  }\n</style>\n\n\n<div class=\"graph\">\n  <div class=\"main-chart\">\n    <div class=\"hexgan-style\">\n      <Graphic {...myGeoScale} flipY>\n        <PolygonLayer\n          onMouseover={(e)=> { ShowData(e) ;} }\n          onMouseout = {(e)=> { MoveData(e) ;} }\n          \n          geometry={hex.column('$geometry')}\n          stroke={'white'}\n          strokeWidth={1} \n          fill={'#E0E0E0'}\n        />\n        <PolygonLayer \n          geometry={hexWithoutNull.column('$geometry')}\n          stroke={'white'}\n          strokeWidth={1} \n          fill={hexWithoutNull.map('mean_price', myColorScale)}\n        />\n      </Graphic>\n    </div>\n    <div></div>\n    \n    <Graphic width={2000} height={425}>\n      <Section\n        x1={0}\n        x2={2000}\n        y1={0}\n        y2={400}\n        {padding}\n        flipY\n        scaleX={scaleLinear().domain(salesDistribution.domain('bins'))}\n        scaleY={scaleLinear().domain([\n          0,\n          salesDistribution.domain('mean_price')[1]\n        ])}>\n        \n        <RectangleLayer\n          onMouseover={(e)=> { ShowData(e) ;} }\n          onMouseout = {(e)=> { MoveData(e) ;} }\n          x1={salesDistribution.map('bins', bin => bin[0])}\n          x2={salesDistribution.map('bins', bin => bin[1])}\n          y1={0}\n          y2={salesDistribution.column('mean_price')}\n          fill={salesDistribution.column('color')} />\n        \n        <XAxis tickCount={5} labelFontSize={8} title=\"mean_floor_area\" />\n        <YAxis labelFontSize={8} title=\"mean price\" />\n      </Section>\n    </Graphic>\n  </div>\n</div>"
  ],
  "names": [],
  "mappings": "AA8GE,4BAAa,CAAC,AACZ,UAAU,CAAE,MAAM,AACpB,CAAC"
}